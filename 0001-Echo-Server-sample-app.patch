From e31fb7b7ca9bf42388a400d558656ce1d657d59d Mon Sep 17 00:00:00 2001
From: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
Date: Mon, 29 Aug 2022 11:27:07 -0400
Subject: [PATCH 1/3] Echo Server sample app

Signed-off-by: Muhammad Husaini Zulkifli <muhammad.husaini.zulkifli@intel.com>
---
 .../net/sockets/echo_server/src/echo-server.c | 712 ++++++++++++++++++
 1 file changed, 712 insertions(+)

diff --git a/samples/net/sockets/echo_server/src/echo-server.c b/samples/net/sockets/echo_server/src/echo-server.c
index c8b4f3b36b..e8e78be01c 100644
--- a/samples/net/sockets/echo_server/src/echo-server.c
+++ b/samples/net/sockets/echo_server/src/echo-server.c
@@ -26,6 +26,16 @@ LOG_MODULE_REGISTER(net_echo_server_sample, LOG_LEVEL_DBG);
 #include "certificate.h"
 
 #define APP_BANNER "Run echo server"
+#include <sys/printk.h>
+#include <sys/fdtable.h>
+#include <stdlib.h>
+#include <net/net_if.h>
+#include <net/ethernet_mgmt.h>
+#include <net/socket.h>
+#include <ptp_clock.h>
+#include <string.h>
+#include <stdint.h>
+#include <ctype.h>
 
 static struct k_sem quit_lock;
 static struct net_mgmt_event_callback mgmt_cb;
@@ -222,6 +232,708 @@ SHELL_STATIC_SUBCMD_SET_CREATE(sample_commands,
 SHELL_CMD_REGISTER(sample, &sample_commands,
 		   "Sample application commands", NULL);
 
+#if 1 //new shell commands
+
+struct in_addr *net_if_ipv4_get_ipaddr(struct net_if *iface,
+				       enum net_addr_state addr_state)
+{
+	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
+	int i;
+
+	if (!ipv4) {
+		return NULL;
+	}
+
+	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
+		if (!ipv4->unicast[i].is_used ||
+		    (addr_state != NET_ADDR_ANY_STATE &&
+		     ipv4->unicast[i].addr_state != addr_state) ||
+		    ipv4->unicast[i].address.family != AF_INET) {
+			continue;
+		}
+		return &ipv4->unicast[i].address.in_addr;
+	}
+
+	return NULL;
+}
+
+struct in6_addr *net_if_ipv6_get_ipaddr(struct net_if *iface,
+				       enum net_addr_state addr_state)
+{
+	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
+	int i;
+
+	if (!ipv6) {
+		return NULL;
+	}
+
+	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
+		if (!ipv6->unicast[i].is_used ||
+		    (addr_state != NET_ADDR_ANY_STATE &&
+		     ipv6->unicast[i].addr_state != addr_state) ||
+		    ipv6->unicast[i].address.family != AF_INET6) {
+			continue;
+		}
+		return &ipv6->unicast[i].address.in6_addr;
+	}
+
+	return NULL;
+}
+
+
+#ifdef CONFIG_NET_UDP
+static int cmd_udp_tx(const struct shell *shell, size_t argc, char **argv)
+{
+	struct net_if *iface;
+	struct in_addr *addr;
+	int serv;
+	struct sockaddr_in bind_addr, client_addr;
+	uint8_t priority = 0;
+
+	if (argc != 5) {
+		shell_help(shell);
+		return -ENOEXEC;
+	}
+
+	iface = net_if_get_by_index(atoi(argv[1]));
+	if (!iface) {
+		shell_error(shell, "Interface not found");
+		return -ENODEV;
+	}
+
+	serv = zsock_socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
+
+	bind_addr.sin_family = AF_INET;
+	addr = net_if_ipv4_get_ipaddr(iface, NET_ADDR_PREFERRED);
+	if (addr) {
+		bind_addr.sin_addr = *addr;
+	} else {
+		bind_addr.sin_addr.s_addr = htonl(INADDR_ANY);
+	}
+	bind_addr.sin_port = htons(0);
+	zsock_bind(serv, (struct sockaddr *)&bind_addr, sizeof(bind_addr));
+
+	if (net_addr_pton(AF_INET, argv[3], &client_addr.sin_addr) < 0) {
+		shell_error(shell, "Invalid destination address");
+		return -EINVAL;
+	}
+	client_addr.sin_family = AF_INET;
+	client_addr.sin_port = htons(atoi(argv[2]));
+
+	net_context_set_option(z_get_fd_obj(serv, NULL, ENOTSOCK),
+			       NET_OPT_PRIORITY, &priority, sizeof(priority));
+
+	int len = zsock_sendto(serv, argv[4], strlen(argv[4]), 0,
+			       (struct sockaddr *)&client_addr,
+			       sizeof(client_addr));
+	shell_print(shell, "send: %s", argv[4]);
+
+	zsock_close(serv);
+	return len < 0 ? len : 0;
+}
+SHELL_CMD_REGISTER(udptx, NULL,
+		   "[interface index] [port number] [dst ip addr] [msg]",
+		   cmd_udp_tx);
+
+static int cmd_udp_rx(const struct shell *shell, size_t argc, char **argv)
+{
+	struct net_if *iface;
+	struct in_addr *addr;
+	int serv;
+	struct sockaddr_in bind_addr;
+	char buf[128];
+
+	if (argc != 3) {
+		shell_help(shell);
+		return -ENOEXEC;
+	}
+
+	iface = net_if_get_by_index(atoi(argv[1]));
+	if (!iface) {
+		shell_error(shell, "Interface not found");
+		return -ENODEV;
+	}
+
+	serv = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
+
+	bind_addr.sin_family = AF_INET;
+	addr = net_if_ipv4_get_ipaddr(iface, NET_ADDR_PREFERRED);
+	if (addr) {
+		bind_addr.sin_addr = *addr;
+	} else {
+		bind_addr.sin_addr.s_addr = htonl(INADDR_ANY);
+	}
+	bind_addr.sin_port = htons(atoi(argv[2]));
+	bind(serv, (struct sockaddr *)&bind_addr, sizeof(bind_addr));
+
+	int len = recv(serv, buf, sizeof(buf), 0);
+
+	shell_print(shell, "recv: %s", buf);
+
+	close(serv);
+	return len < 0 ? len : 0;
+}
+SHELL_CMD_REGISTER(udprx, NULL,
+		   "[interface index] [port number]", cmd_udp_rx);
+#endif /* CONFIG_NET_UDP */
+
+#ifdef CONFIG_NET_TCP
+static int cmd_tcp_tx(const struct shell *shell, size_t argc, char **argv)
+{
+	struct net_if *iface;
+	int sock;
+	struct in_addr *addr;
+	struct sockaddr_in bind_addr, serv_addr;
+
+	if (argc != 5) {
+		shell_help(shell);
+		return -ENOEXEC;
+	}
+
+	iface = net_if_get_by_index(atoi(argv[1]));
+	if (!iface) {
+		shell_error(shell, "Interface not found");
+		return -ENODEV;
+	}
+
+	/* Socket creation */
+	sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
+
+	/* Ethernet interface's address, protocol, and port */
+	bind_addr.sin_family = AF_INET;
+	bind_addr.sin_port = htons(atoi(argv[2]));
+	addr = net_if_ipv4_get_ipaddr(iface, NET_ADDR_PREFERRED);
+	if (addr) {
+		bind_addr.sin_addr = *addr;
+	} else {
+		bind_addr.sin_addr.s_addr = htonl(INADDR_ANY);
+	}
+
+	/* Bind socket to Ethernet interface */
+	bind(sock, (struct sockaddr *)&bind_addr, sizeof(bind_addr));
+
+	/* Server's address, protocol, and port*/
+	net_addr_pton(AF_INET, argv[3], &serv_addr.sin_addr);
+	serv_addr.sin_family = AF_INET;
+	serv_addr.sin_port = htons(atoi(argv[2]));
+
+	/* Connect socket to server */
+	if (connect(sock, (struct sockaddr *)&serv_addr,
+	    sizeof(serv_addr)) < 0) {
+		shell_error(shell, "connection failed");
+		close(sock);
+		return 0;
+	}
+	else {
+		shell_print(shell, "connected to TCP server");
+	}
+
+	/* Send packet */
+	send(sock, argv[4], strlen(argv[4]), 0);
+	shell_print(shell, "send: %s", argv[4]);
+
+	close(sock);
+	return 0;
+}
+SHELL_CMD_REGISTER(tcptx, NULL,
+		   "[interface index] [port number] [dst ip addr] [msg]",
+		   cmd_tcp_tx);
+
+static int cmd_tcp_rx(const struct shell *shell, size_t argc, char **argv)
+{
+	struct net_if *iface;
+	int sock;
+	struct in_addr *addr;
+	struct sockaddr_in bind_addr, serv_addr;
+	char buf[128] = {0};
+
+	if (argc != 4) {
+		shell_help(shell);
+		return -ENOEXEC;
+	}
+
+	iface = net_if_get_by_index(atoi(argv[1]));
+	if (!iface) {
+		shell_error(shell, "Interface not found");
+		return -ENODEV;
+	}
+
+	/* Socket creation */
+	sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
+
+	/* Ethernet interface's address, protocol, and port */
+	bind_addr.sin_family = AF_INET;
+	bind_addr.sin_port = htons(atoi(argv[2]));
+	addr = net_if_ipv4_get_ipaddr(iface, NET_ADDR_PREFERRED);
+	if (addr) {
+		bind_addr.sin_addr = *addr;
+	} else {
+		bind_addr.sin_addr.s_addr = htonl(INADDR_ANY);
+	}
+
+	/* Bind socket to Ethernet interface */
+	bind(sock, (struct sockaddr *)&bind_addr, sizeof(bind_addr));
+
+	/* Server's address, protocol, and port */
+	net_addr_pton(AF_INET, argv[3], &serv_addr.sin_addr);
+	serv_addr.sin_family = AF_INET;
+	serv_addr.sin_port = htons(atoi(argv[2]));
+
+	/* Connect socket to server */
+	if (connect(sock, (struct sockaddr *)&serv_addr,
+	    sizeof(serv_addr)) < 0) {
+		shell_error(shell, "connection failed");
+		close(sock);
+		return 0;
+	}
+	else {
+		shell_print(shell, "connected to TCP server");
+	}
+
+	/* Receive packet */
+	recv(sock, buf, sizeof(buf), 0);
+	shell_print(shell, "recv: %s", buf);
+
+	close(sock);
+	return 0;
+}
+SHELL_CMD_REGISTER(tcprx, NULL, "[interface index] [port number] [dst ip addr]",
+		   cmd_tcp_rx);
+#endif /* CONFIG_NET_TCP */
+
+static int cmd_ip_addr(const struct shell *shell, size_t argc, char **argv)
+{
+	struct net_if *iface;
+	struct in_addr *oldaddr, newaddr;
+	struct net_if_addr *ret;
+
+	if (argc != 3) {
+		shell_help(shell);
+		return -ENOEXEC;
+	}
+
+	iface = net_if_get_by_index(atoi(argv[1]));
+	if (!iface) {
+		shell_error(shell, "Interface not found");
+		return -ENODEV;
+	}
+
+
+	oldaddr = net_if_ipv4_get_ipaddr(iface, NET_ADDR_PREFERRED);
+	if (oldaddr) {
+		net_if_ipv4_addr_rm(iface, oldaddr);
+	}
+
+	if (!inet_pton(AF_INET, argv[2], newaddr.s4_addr))
+	{
+		shell_error(shell, "Invalid IPv4 address entered.");
+		return -EINVAL;
+	}
+
+	ret = net_if_ipv4_addr_add(iface, &newaddr, NET_ADDR_OVERRIDABLE, 0);
+
+  printk("IPv4 was set \n");
+
+	return ret ? 0 : -EAGAIN;
+}
+SHELL_CMD_REGISTER(ipaddr, NULL,
+		   "[interface index] [255.255.255.255]", cmd_ip_addr);
+
+static int cmd_ip_addr6(const struct shell *shell, size_t argc, char **argv)
+{
+	struct net_if *iface;
+	struct in6_addr *oldaddr, newaddr;
+	struct net_if_addr *ret;
+
+	if (argc != 3) {
+		shell_help(shell);
+		return -ENOEXEC;
+	}
+
+	iface = net_if_get_by_index(atoi(argv[1]));
+	if (!iface) {
+		shell_error(shell, "Interface not found");
+		return -ENODEV;
+	}
+
+	oldaddr = net_if_ipv6_get_ipaddr(iface, NET_ADDR_PREFERRED);
+	if (oldaddr) {
+		net_if_ipv6_addr_rm(iface, oldaddr);
+	}
+
+	if (!inet_pton(AF_INET6, argv[2], newaddr.s6_addr))
+	{
+		shell_error(shell, "Invalid IPv6 address entered.");
+		return -EINVAL;
+	}
+
+	ret = net_if_ipv6_addr_add(iface, &newaddr, NET_ADDR_OVERRIDABLE, 0);
+
+ printk("IPv6 was set \n");
+
+	return ret ? 0 : -EAGAIN;
+}
+SHELL_CMD_REGISTER(ipaddr6, NULL,
+		   "[interface index] [fe80:0000:250:56ff:fea9:dfa]", cmd_ip_addr6);
+
+static int cmd_ip_subnet(const struct shell *shell, size_t argc, char **argv)
+{
+	struct net_if *iface;
+	struct in_addr subnet;
+
+	if (argc != 3) {
+		shell_help(shell);
+		return -ENOEXEC;
+	}
+
+	iface = net_if_get_by_index(atoi(argv[1]));
+	if (!iface) {
+		shell_error(shell, "Interface not found");
+		return -ENODEV;
+	}
+
+	if (!inet_pton(AF_INET, argv[2], subnet.s4_addr))
+	{
+		shell_error(shell, "Invalid IPv4 address entered.");
+		return -EINVAL;
+	}
+
+	net_if_ipv4_set_netmask(iface, &subnet);
+ printk("Netmask /Subnet was set \n");
+	return 0;
+}
+SHELL_CMD_REGISTER(subnet, NULL, "[interface index] [255.255.255.255]",
+		   cmd_ip_subnet);
+
+static int cmd_mac_addr(const struct shell *shell, size_t argc, char **argv)
+{
+	struct net_if *iface;
+	struct ethernet_req_params params = { 0 };
+	int ret;
+
+	if (argc != 8) {
+		shell_help(shell);
+		return -ENOEXEC;
+	}
+
+	iface = net_if_get_by_index(atoi(argv[1]));
+	if (!iface) {
+		shell_error(shell, "Interface not found");
+		return -ENODEV;
+	}
+
+	for (int i = 0; i < 6; i++) {
+		params.mac_address.addr[i] = strtol(argv[i+2], NULL, 16);
+	}
+
+	ret = net_mgmt(NET_REQUEST_ETHERNET_SET_MAC_ADDRESS, iface,
+		       &params, sizeof(struct ethernet_req_params));
+	if (ret == -EACCES) {
+		shell_error(shell,
+			    "To change MAC address, require interface down");
+	}
+
+	return ret;
+}
+SHELL_CMD_REGISTER(macaddr, NULL,
+		   "[interface index] [AA BB CC DD EE FF]", cmd_mac_addr);
+
+
+static int cmd_auto_negotiation(const struct shell *shell, size_t argc,
+				char **argv)
+{
+	struct net_if *iface;
+	struct ethernet_req_params params = { 0 };
+	int ret;
+
+	if (argc != 2) {
+		shell_help(shell);
+		return -ENOEXEC;
+	}
+
+	iface = net_if_get_by_index(atoi(argv[1]));
+	if (!iface) {
+		shell_error(shell, "Interface not found");
+		return -ENODEV;
+	}
+
+	params.auto_negotiation = true;
+
+	ret = net_mgmt(NET_REQUEST_ETHERNET_SET_AUTO_NEGOTIATION, iface,
+		       &params, sizeof(struct ethernet_req_params));
+
+	printk("Mac Address was set \n");
+	return ret;
+}
+SHELL_CMD_REGISTER(autoneg, NULL,
+		   "[interface index]", cmd_auto_negotiation);
+
+static int cmd_duplex(const struct shell *shell, size_t argc, char **argv)
+{
+	struct net_if *iface;
+	struct ethernet_req_params params = { 0 };
+	int ret;
+
+	if (argc != 3) {
+		shell_help(shell);
+		return -ENOEXEC;
+	}
+
+	iface = net_if_get_by_index(atoi(argv[1]));
+	if (!iface) {
+		shell_error(shell, "Interface not found");
+		return -ENODEV;
+	}
+
+	if (atoi(argv[2]) == 1) {
+		params.full_duplex = true;
+	} else if (atoi(argv[2]) == 0) {
+		params.full_duplex = false;
+	} else {
+		shell_error(shell, "Argument not supported");
+		return -ENOTSUP;
+	}
+
+	ret = net_mgmt(NET_REQUEST_ETHERNET_SET_DUPLEX, iface,
+		       &params, sizeof(struct ethernet_req_params));
+	return ret;
+}
+SHELL_CMD_REGISTER(duplex, NULL,
+		   "[interface index] [full - 1; half - 0.]", cmd_duplex);
+
+
+static int cmd_link_speed(const struct shell *shell, size_t argc, char **argv)
+{
+	struct net_if *iface;
+	struct ethernet_req_params params = { 0 };
+	int ret;
+
+	if (argc != 3) {
+		shell_help(shell);
+		return -ENOEXEC;
+	}
+
+	iface = net_if_get_by_index(atoi(argv[1]));
+	if (!iface) {
+		shell_error(shell, "Interface not found");
+		return -ENODEV;
+	}
+
+	if (atoi(argv[2]) == 1000) {
+		params.l.link_1000bt = true;
+	} else if (atoi(argv[2]) == 100) {
+		params.l.link_100bt = true;
+	} else if (atoi(argv[2]) == 10) {
+		params.l.link_10bt = true;
+	} else {
+		shell_error(shell, "Argument not supported");
+		return -ENOTSUP;
+	}
+
+	ret = net_mgmt(NET_REQUEST_ETHERNET_SET_LINK, iface,
+		       &params, sizeof(struct ethernet_req_params));
+	shell_error(shell, "ret :%d", ret);
+	return ret;
+}
+SHELL_CMD_REGISTER(linkspeed, NULL,
+		   "[interface index] [Speed 10/100/1000]",
+		   cmd_link_speed);
+
+#ifdef CONFIG_NET_DHCPV4
+#if defined(CONFIG_ETH_DWC_EQOS_0_NAME)
+#define ETH_NAME CONFIG_ETH_DWC_EQOS_0_NAME
+#elif defined(CONFIG_ETH_DWC_EQOS_1_NAME)
+#define ETH_NAME CONFIG_ETH_DWC_EQOS_1_NAME
+#else
+#define ETH_NAME "ETH_DWC_EQOS_1"
+#endif
+
+static int cmd_dhcp(const struct shell *shell, size_t argc, char **argv)
+{
+	/* struct device *dev = device_get_binding(CONFIG_ETH_DW_0_NAME); */
+	struct device *dev = device_get_binding(ETH_NAME);
+	struct net_if *iface = net_if_lookup_by_dev(dev);
+
+	if (argc > 2) {
+		return -ENOEXEC;
+	}
+
+	if (argc == 2) {
+		iface = net_if_get_by_index(atoi(argv[1]));
+	}
+
+	if (!iface) {
+		shell_error(shell, "Interface not found");
+		return -ENODEV;
+	}
+	net_dhcpv4_stop(iface);
+	net_dhcpv4_start(iface);
+
+	return 0;
+}
+SHELL_CMD_REGISTER(dhcp, NULL,
+		   "[Ethernet interface index -- optional]", cmd_dhcp);
+#endif /* CONFIG_NET_DHCPV4 */
+
+
+#if 0
+#ifdef CONFIG_NET_PROMISCUOUS_MODE
+static int cmd_promisc(const struct shell *shell, size_t argc, char **argv)
+{
+	struct net_if *iface;
+	int enable;
+	int ret;
+
+	if (argc != 3) {
+		shell_help(shell);
+		return -ENOEXEC;
+	}
+
+	iface = net_if_get_by_index(atoi(argv[1]));
+	if (!iface) {
+		shell_error(shell, "Interface not found");
+		return -ENODEV;
+	}
+
+	enable = atoi(argv[2]);
+
+	if (enable) {
+		ret = net_promisc_mode_on(iface);
+		if (ret < 0) {
+			shell_error(shell,
+				    "Failed (%d) to set promiscuous mode",
+				    ret);
+		}
+	} else {
+		ret = net_promisc_mode_off(iface);
+		if (ret < 0) {
+			shell_error(shell,
+				    "Failed (%d) to unset promiscuous mode",
+				    ret);
+		}
+	}
+
+	return 0;
+}
+SHELL_CMD_REGISTER(promisc, NULL, "[interface index] [1:ON / 0:OFF]",
+		   cmd_promisc);
+#endif /* CONFIG_NET_PROMISCUOUS_MODE */
+
+
+#ifdef CONFIG_PTP_CLOCK
+static int cmd_set_ptp_clk(const struct shell *shell, size_t argc, char **argv)
+{
+	struct net_if *iface;
+	struct net_ptp_time time = {
+		.second = 0,
+		.nanosecond = 0,
+	};
+	struct device *clk;
+
+	if (argc != 4) {
+		shell_help(shell);
+		return -ENOEXEC;
+	}
+
+	iface = net_if_get_by_index(atoi(argv[1]));
+	if (!iface) {
+		shell_error(shell, "Interface not found");
+		return -ENODEV;
+	}
+
+	clk = net_eth_get_ptp_clock(iface);
+	if (!clk) {
+		shell_error(shell, "Interface no PTP support");
+		return -ENODEV;
+	}
+
+	time.second = strtoul(argv[2], NULL, 10);
+	time.nanosecond = strtoul(argv[3], NULL, 10);
+	if (time.nanosecond > 999999999UL || time.second > 4294967295UL) {
+		shell_error(shell, "Time set value out of range");
+		return -EINVAL;
+	}
+
+	ptp_clock_set(clk, &time);
+
+	return 0;
+}
+SHELL_CMD_REGISTER(set_ptp, NULL, "[interface index] [second] [nanosecond]",
+		   cmd_set_ptp_clk);
+
+static int cmd_get_ptp_clk(const struct shell *shell, size_t argc, char **argv)
+{
+	struct net_if *iface;
+	struct net_ptp_time time = {
+		.second = 0,
+		.nanosecond = 0,
+	};
+	struct device *clk;
+
+	if (argc != 2) {
+		shell_help(shell);
+		return -ENOEXEC;
+	}
+
+	iface = net_if_get_by_index(atoi(argv[1]));
+	if (!iface) {
+		shell_error(shell, "Interface not found");
+		return -ENODEV;
+	}
+
+	clk = net_eth_get_ptp_clock(iface);
+	if (!clk) {
+		shell_error(shell, "Interface no PTP support");
+		return -ENODEV;
+	}
+
+	ptp_clock_get(clk, &time);
+	printk("ptp time (second):     %llu\n", time.second);
+	shell_print(shell, "ptp time (nanosecond): %09u", time.nanosecond);
+
+	return 0;
+}
+SHELL_CMD_REGISTER(get_ptp, NULL, "[interface index]", cmd_get_ptp_clk);
+#endif /* CONFIG_PTP_CLOCK */
+#endif /*vijay disable it */
+
+static int shell_cmd_reg1(const struct shell *shell, size_t argc, char **argv)
+{
+	int addr;
+	uint32_t value;
+
+	if (argc != 2) {
+		return -ENOTSUP;
+	}
+
+	addr = strtol(argv[1], NULL, 16);
+	value = sys_read32(addr);
+	printk("read addr %x value %x\n", addr, value);
+
+	return 0;
+}
+SHELL_CMD_REGISTER(rr, NULL, "[addr]", shell_cmd_reg1);
+
+static int shell_cmd_reg2(const struct shell *shell, size_t argc, char **argv)
+{
+	int addr;
+	uint32_t value;
+
+	if (argc != 3) {
+		return -ENOTSUP;
+	}
+
+	addr = strtol(argv[1], NULL, 16);
+	value = strtol(argv[2], NULL, 16);
+
+	sys_write32(value, addr);
+	printk("write addr %x value %x\n", addr, value);
+
+	return 0;
+}
+SHELL_CMD_REGISTER(wr, NULL, "[addr] [value]", shell_cmd_reg2);
+#endif
+
 void main(void)
 {
 	init_app();
-- 
2.25.1

